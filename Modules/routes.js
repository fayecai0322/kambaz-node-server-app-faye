import * as modulesDao from "./dao.js";
import express from "express";

const router = express.Router(); // ‚úÖ Ê≠£Á°ÆÂàùÂßãÂåñ `router`

export default function ModuleRoutes(app){
    // ‚úÖ Êõ¥Êñ∞Ê®°Âùó‰ø°ÊÅØ
    app.put("/api/modules/:moduleId", (req, res) => {
        try {
            const { moduleId } = req.params;
            const moduleUpdates = req.body;
            const updatedModule =  modulesDao.updateModule(moduleId, moduleUpdates);
            res.json(updatedModule);
        } catch (error) {
            console.error("Error updating module:", error);
            res.status(500).json({ error: "Failed to update module" });
        }
    });

    // ‚úÖ Âà†Èô§Ê®°Âùó
    app.delete("/api/modules/:moduleId",  (req, res) => {
        try {
            const { moduleId } = req.params;
            const status = modulesDao.deleteModule(moduleId);
            res.json({ success: status });
        } catch (error) {
            console.error("Error deleting module:", error);
            res.status(500).json({ error: "Failed to delete module" });
        }
    });

    // ‚úÖ Ê∑ªÂä†Ê®°Âùó
    router.post("/courses/:courseId/modules", (req, res) => {
        const { courseId } = req.params;
        const moduleData = req.body;
        
        // üö® **Èò≤Ê≠¢ `courseId` Êàñ `moduleData` ‰∏∫Á©∫**
        if (!courseId || !moduleData || !moduleData.name) {
            return res.status(400).json({ error: "Invalid module data" });
        }

        try {
            const newModule = modulesDao.createModule(courseId, moduleData); 
            res.status(201).json(newModule);
        } catch (error) {
            console.error("Error creating module:", error);
            res.status(500).json({ error: "Internal Server Error" });
        }
    });

    // ‚úÖ Ëé∑ÂèñÁâπÂÆöËØæÁ®ãÁöÑÊâÄÊúâÊ®°Âùó
    app.get("/api/courses/:courseId/modules", (req, res) => {
        try {
            const { courseId } = req.params;
            console.log(`üìå GET request received for courseId: ${courseId}`);
            const modules = modulesDao.findModulesForCourse(courseId);
            console.log("‚úÖ Returning modules:", modules);
            res.json(modules);
        } catch (error) {
            console.error("Error fetching modules:", error);
            res.status(500).json({ error: "Failed to fetch modules" });
        }
    });
        // Ê∑ªÂä† lesson Ë∑ØÁî±
        router.post("/modules/:moduleId/lessons", (req, res) => {
          try {
            const { moduleId } = req.params;
            const lessonData = req.body;
            const newLesson = modulesDao.addLessonToModule(moduleId, lessonData);
            res.status(201).json(newLesson);
          } catch (error) {
            console.error("‚ùå Error adding lesson:", error);
            res.status(500).json({ error: "Failed to add lesson" });
          }
        });
    app.use("/api",router); // ‚úÖ ÊåÇËΩΩÂà∞ app ‰∏ä
}
